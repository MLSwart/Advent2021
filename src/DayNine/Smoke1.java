package DayNine;

import java.util.ArrayList;
import java.util.List;

public class Smoke1 {
    public static void main(String[] args) {
        Smoke1 smoke = new Smoke1();
        smoke.check();

        System.out.println(smoke.lowPointValues.size());

        int uitkomst = smoke.lowPointValues.size();
        for (int u = 0; u < smoke.lowPointValues.size(); u++) {
            uitkomst += smoke.lowPointValues.get(u);
        }

        System.out.println(uitkomst);


    }

    public void check() {
        controleerMidden(heightMap);
        controleerRandBoven(heightMap);
        controleerRandOnder(heightMap);
        controleerRandLinks(heightMap);
        controleerRandRechts(heightMap);
        controleerHoeken(heightMap);
    }

    int[][] heightMap = {{7,6,7,8,9,2,1,2,3,4,9,8,8,6,7,8,9,0,1,2,3,8,9,5,4,3,2,3,4,9,8,7,6,5,4,3,2,1,2,5,7,8,9,9,9,9,5,6,7,8,9,8,7,6,5,4,5,4,2,2,3,7,8,9,9,8,9,8,6,5,4,3,2,1,2,4,5,6,9,8,9,9,8,9,4,3,2,5,6,7,8,9,8,9,2,1,2,9,6,5},
            {6,5,6,7,8,9,0,1,3,9,8,7,6,5,8,9,9,9,2,3,6,7,8,9,6,5,1,2,9,8,7,6,5,4,3,2,1,0,3,4,5,6,9,9,8,8,9,7,9,9,9,9,8,7,9,3,2,1,0,1,2,5,6,9,8,7,6,9,8,7,5,7,3,2,4,5,9,7,9,7,6,7,7,9,9,4,3,4,5,9,9,8,7,8,9,0,9,8,9,3},
            {5,4,5,6,7,9,9,2,9,8,9,8,7,6,9,9,9,8,9,4,5,6,7,8,9,4,0,1,3,9,8,7,6,5,7,3,2,1,2,5,6,7,8,9,6,7,9,9,1,0,9,8,9,8,8,6,3,2,1,2,3,4,5,8,9,6,5,9,8,7,6,8,4,3,4,7,8,9,8,9,5,5,6,8,8,9,7,6,9,8,8,7,6,8,9,1,9,7,8,9},
            {4,3,4,5,8,9,8,9,8,7,6,9,8,7,8,9,8,7,8,9,6,7,8,9,4,3,2,3,4,9,9,9,7,7,5,4,3,2,4,5,7,8,9,4,5,6,7,8,9,9,8,7,9,9,9,5,4,4,3,4,5,5,6,7,8,9,4,3,9,8,7,8,9,4,5,8,9,9,7,5,4,4,5,6,7,8,9,7,9,7,6,9,5,6,8,9,8,6,7,8},
            {3,2,1,2,9,8,7,6,5,6,5,6,9,8,9,8,7,6,7,9,9,8,9,8,5,4,3,5,9,8,9,8,9,9,7,6,4,7,6,6,7,8,9,3,6,6,7,8,9,8,7,5,9,8,7,6,5,6,7,7,6,6,7,8,9,9,3,2,3,9,8,9,6,5,6,9,9,8,7,6,3,2,4,5,6,7,8,9,8,6,5,4,3,2,2,3,4,5,6,7},
            {4,3,3,6,7,9,6,5,4,3,4,5,6,9,8,9,6,5,8,7,8,9,9,7,6,5,4,9,9,7,8,7,9,8,7,6,5,6,7,7,8,9,0,1,5,5,8,9,8,9,6,4,2,9,8,7,6,7,8,9,7,8,9,9,7,8,9,1,2,3,9,8,7,6,7,8,9,9,8,8,7,4,5,6,7,8,9,3,9,8,4,3,2,1,0,4,5,6,9,8},
            {5,4,4,5,9,9,5,4,3,2,3,4,5,6,7,8,9,4,5,6,6,9,9,8,7,6,9,8,7,6,6,6,8,9,9,7,6,7,9,8,9,3,1,2,3,4,9,8,7,6,5,4,1,0,9,9,8,8,9,9,9,9,3,5,6,7,8,9,3,9,8,9,9,7,8,9,6,7,9,9,6,5,6,7,8,9,1,2,9,9,5,4,5,2,1,6,6,7,8,9},
            {6,5,6,9,8,7,6,5,2,1,2,3,6,7,8,9,1,2,3,4,5,8,9,9,8,9,8,7,6,5,4,5,6,7,8,9,9,8,9,9,5,4,5,3,5,6,9,9,8,5,4,3,2,1,2,3,9,9,9,9,0,1,2,6,9,8,9,2,9,8,7,5,9,8,9,4,5,7,9,8,7,8,7,8,9,4,2,9,8,7,6,7,4,3,2,7,8,9,9,5},
            {7,6,8,9,9,8,6,4,3,2,3,4,5,6,9,1,0,1,2,5,6,7,9,9,9,0,9,8,7,6,7,6,7,8,9,7,6,9,8,9,8,7,6,8,7,7,8,9,9,9,8,4,3,2,3,4,5,6,7,8,9,2,3,7,8,9,2,1,2,9,6,4,2,9,2,3,4,9,9,9,8,9,8,9,6,5,4,5,9,8,7,8,9,5,3,4,5,9,5,4},
            {8,7,8,9,9,7,6,5,4,5,8,5,6,7,8,9,1,3,4,5,6,9,8,9,2,1,9,9,8,9,8,7,8,9,8,9,5,9,7,6,9,8,9,9,8,8,9,9,9,8,7,6,5,6,7,9,6,7,8,9,8,3,5,6,7,9,9,2,9,8,7,3,1,0,1,9,9,8,9,9,9,7,9,9,8,6,5,6,7,9,8,9,8,5,4,5,7,8,9,3},
            {9,8,9,5,9,8,9,6,8,6,7,8,7,8,9,9,2,4,6,6,9,8,7,8,9,9,8,9,9,9,9,8,9,8,7,6,9,8,9,4,3,9,4,3,9,9,9,8,9,9,8,7,6,7,8,9,8,8,9,8,7,5,7,7,8,9,8,9,8,7,6,5,6,1,9,8,9,6,8,9,5,6,9,9,9,8,9,7,9,9,9,8,7,6,5,6,8,9,5,4},
            {4,9,3,4,3,9,9,7,8,7,8,9,9,9,9,7,6,5,7,9,9,7,6,7,9,8,7,9,9,8,7,9,5,7,6,5,6,7,9,3,2,3,9,4,9,8,7,6,5,6,9,9,7,8,9,9,9,9,5,9,9,9,8,8,9,6,7,7,9,8,8,6,8,9,8,7,6,5,7,8,4,9,8,9,9,9,8,9,8,7,9,9,8,7,6,7,9,7,6,5},
            {3,2,1,0,2,3,9,8,9,8,9,8,9,2,9,8,7,9,9,8,7,6,5,3,4,5,6,8,8,9,6,5,4,3,2,3,4,8,9,9,3,9,8,9,9,7,6,5,4,2,4,9,8,9,9,9,2,3,4,7,8,9,9,9,4,5,6,6,7,9,8,7,9,8,7,6,5,4,3,4,3,4,6,7,8,9,7,6,7,5,6,7,9,8,7,9,9,8,7,6},
            {4,3,2,3,3,5,9,9,9,9,8,7,9,1,2,9,9,8,7,6,5,5,4,2,3,4,5,6,7,8,9,6,5,4,4,5,5,6,7,8,9,6,6,7,8,9,7,4,3,1,3,4,9,9,8,8,9,9,5,6,7,9,6,4,3,4,5,5,6,9,9,9,8,7,6,5,4,3,2,3,2,3,4,5,9,7,6,5,4,3,3,4,5,9,8,9,3,9,8,7},
            {5,5,3,5,6,9,8,9,9,8,9,6,8,9,3,4,5,9,9,5,4,3,0,1,2,3,4,8,9,9,8,7,6,6,5,6,6,7,8,9,3,5,5,6,7,8,9,5,1,0,3,4,9,9,7,6,7,8,9,7,8,9,5,4,2,3,3,4,9,8,9,9,9,9,8,8,7,5,1,0,1,2,5,7,8,9,7,8,7,1,2,7,7,8,9,3,2,3,9,8},
            {6,6,4,5,9,8,7,8,9,7,6,5,9,5,4,9,6,9,8,7,9,2,1,3,3,9,5,9,4,2,9,9,8,7,6,7,9,8,9,1,2,3,4,5,8,9,4,3,2,1,2,9,8,6,5,5,6,7,8,9,9,5,4,3,1,0,2,9,8,7,8,9,9,8,7,6,5,4,2,1,2,3,4,5,7,8,9,7,6,5,3,5,6,7,8,9,0,1,2,9},
            {9,7,5,9,8,7,6,7,8,9,7,9,8,9,9,8,9,9,9,9,8,3,2,4,9,8,9,8,9,0,2,3,9,8,7,8,9,9,3,2,3,5,6,7,9,6,5,4,3,2,9,8,7,5,4,3,4,6,7,8,9,6,4,3,2,2,9,8,7,6,5,5,3,9,8,7,8,5,4,3,4,8,5,7,8,9,9,8,7,6,5,7,7,8,9,2,1,2,3,4},
            {9,8,9,8,7,6,5,9,9,0,9,8,7,8,7,7,6,9,8,7,6,5,3,9,8,7,6,7,8,9,3,5,6,9,8,9,8,7,5,6,7,8,9,8,9,7,9,5,4,3,4,9,8,5,3,2,4,5,6,7,8,9,9,4,3,4,6,9,8,5,4,3,2,3,9,8,7,6,5,4,6,7,6,8,9,6,8,9,9,7,8,9,8,9,4,3,4,3,7,8},
            {9,9,4,9,9,7,6,8,9,1,3,9,6,6,6,2,5,4,9,8,7,6,9,8,9,7,5,6,7,8,9,6,9,8,9,9,8,7,6,7,8,9,3,9,5,9,8,7,6,4,9,8,4,3,2,1,3,4,6,7,9,9,8,9,4,5,9,8,7,6,6,5,4,4,5,9,8,7,6,5,6,7,8,9,6,5,6,7,9,8,9,9,9,7,5,4,5,4,5,6},
            {9,9,5,6,9,8,7,9,3,2,9,8,5,4,5,1,2,3,4,9,8,9,9,7,7,6,4,5,6,5,6,9,9,7,6,4,9,9,9,8,9,3,2,3,4,5,9,8,7,9,8,7,5,4,3,2,4,5,7,8,9,8,7,9,5,6,9,9,9,8,7,8,6,8,6,7,9,9,7,6,7,8,9,8,7,4,9,9,7,9,7,8,9,7,6,9,7,9,6,7},
            {7,8,9,9,9,9,9,5,4,9,8,7,6,3,1,0,1,2,5,6,9,8,7,6,5,4,3,2,3,4,5,8,9,6,4,3,2,1,0,9,9,8,5,4,5,6,7,9,8,9,9,8,6,7,6,3,4,6,7,8,9,5,6,7,9,9,8,7,5,9,8,9,7,8,7,8,9,9,8,7,8,9,5,9,9,9,8,6,6,5,6,7,8,9,9,8,9,8,9,8},
            {6,7,9,8,8,9,7,6,5,6,9,9,5,4,2,1,2,3,4,9,9,9,8,7,6,5,0,1,4,5,6,7,8,9,5,4,3,9,9,8,9,7,6,5,6,7,8,9,9,9,8,9,7,8,5,4,5,6,8,9,4,4,5,6,7,8,9,5,4,3,9,9,8,9,8,9,5,5,9,8,9,5,4,9,8,7,6,4,3,4,5,8,9,9,8,7,8,7,8,9},
            {5,6,7,6,7,8,9,7,9,9,8,7,6,5,3,2,4,5,9,8,9,9,9,9,7,6,3,2,5,6,7,8,9,7,6,6,9,8,8,7,9,8,7,6,7,8,9,8,9,9,7,6,9,9,8,7,6,7,9,4,3,3,4,5,6,7,8,9,3,2,1,0,9,9,9,5,4,4,6,9,9,6,9,8,7,6,5,3,2,3,4,9,9,8,7,6,5,6,7,8},
            {4,5,6,5,6,9,2,9,8,7,9,8,7,6,8,3,7,6,9,7,8,9,8,7,6,5,4,3,4,7,8,9,9,8,7,9,8,7,5,6,7,9,9,7,9,9,8,7,8,9,9,5,4,3,9,8,8,9,3,2,1,2,3,4,5,8,9,5,4,3,3,1,9,8,6,5,3,2,5,7,8,9,8,7,6,5,4,3,1,2,9,9,8,7,6,4,4,5,6,9},
            {3,2,3,4,8,9,1,9,9,6,5,9,8,9,5,4,5,9,8,6,9,8,9,9,8,6,7,4,9,8,9,4,3,9,9,7,9,5,4,5,6,7,8,9,9,8,9,5,6,9,8,9,4,2,1,9,9,5,4,9,5,3,4,5,6,7,8,9,5,4,4,2,9,8,7,6,4,3,4,5,6,7,9,9,8,6,5,2,0,9,8,9,9,9,4,3,2,8,7,8},
            {4,5,4,5,6,8,9,8,7,9,4,5,9,7,6,5,9,8,6,5,6,7,8,9,9,8,7,6,8,9,6,5,2,9,8,6,5,4,3,6,5,6,7,9,8,7,5,4,5,6,7,8,9,3,9,8,7,6,9,8,9,4,5,9,7,8,9,8,6,7,8,3,4,9,8,7,5,4,5,6,9,9,8,9,9,7,5,4,9,8,7,8,9,8,5,4,1,2,4,5},
            {7,6,6,6,7,9,9,7,6,7,2,4,9,8,9,9,8,6,5,4,5,6,7,7,8,9,8,7,8,9,8,6,9,8,9,6,5,3,2,3,4,5,7,9,7,6,4,3,4,5,6,7,8,9,1,9,8,9,8,7,9,5,6,7,8,9,9,9,8,9,6,5,5,6,9,8,9,5,6,9,8,9,7,9,8,9,9,9,8,7,6,9,8,7,6,7,2,3,9,6},
            {8,7,8,7,8,9,8,6,5,4,1,2,3,9,9,9,7,9,4,3,2,5,7,6,7,9,9,8,9,9,9,9,8,7,9,7,9,4,1,2,3,9,9,8,5,4,3,2,3,4,5,7,8,9,2,4,9,9,9,6,8,9,9,8,9,9,8,9,9,8,7,7,6,7,8,9,7,6,9,8,7,6,5,8,7,9,8,9,7,6,5,6,9,8,9,8,3,9,8,9},
            {9,8,9,8,9,8,7,6,5,3,2,3,4,5,9,8,6,4,3,2,1,4,6,5,6,8,9,9,9,9,8,8,7,6,8,9,8,9,2,4,9,8,7,6,4,3,2,1,2,3,5,6,7,8,9,5,9,8,9,5,6,9,8,9,7,6,7,8,9,9,9,8,9,8,9,9,8,8,9,9,7,6,4,6,5,6,7,8,9,2,4,5,8,9,9,9,9,8,7,8},
            {8,9,5,9,1,9,9,7,6,4,5,4,5,6,8,9,9,5,4,9,0,2,3,4,5,7,8,9,9,8,7,7,6,5,7,8,6,8,9,9,8,7,6,5,4,2,1,0,1,2,4,5,6,7,8,9,8,7,5,4,7,6,7,8,9,5,8,8,9,9,8,9,8,9,6,7,9,9,9,9,8,4,3,2,4,5,6,9,0,1,2,3,6,7,8,9,9,7,6,7},
            {7,5,4,3,0,1,9,8,7,8,7,8,9,8,9,9,8,9,9,8,9,5,4,9,6,8,9,9,8,7,6,6,4,3,2,4,5,6,8,9,9,8,7,6,5,3,2,1,2,3,5,7,8,9,9,4,9,8,6,3,6,5,6,9,4,4,6,7,9,8,7,6,7,8,5,6,7,8,9,9,9,9,3,1,3,4,5,8,9,2,3,4,5,7,9,9,8,7,5,8},
            {9,6,5,2,1,2,3,9,8,9,8,9,6,9,9,8,7,8,9,7,9,9,9,8,9,9,0,1,9,8,5,4,3,2,1,3,6,7,9,3,2,9,8,7,6,5,3,2,3,7,6,8,9,1,2,3,9,9,9,2,3,4,7,9,2,3,4,9,8,7,6,5,4,5,4,5,9,9,8,8,9,8,9,2,6,5,6,7,8,9,4,5,6,8,9,8,9,5,4,9},
            {8,7,8,3,4,3,5,6,9,9,9,3,4,9,8,7,6,5,4,6,7,8,9,7,8,9,1,9,8,7,6,5,4,3,0,4,6,7,8,9,1,0,9,8,9,5,4,3,4,8,7,9,1,0,1,9,8,9,8,1,2,5,6,8,9,9,5,6,9,8,5,4,3,2,3,9,8,9,6,7,8,7,9,8,7,6,7,8,9,8,5,8,7,9,8,7,6,4,3,5},
            {9,8,9,7,5,4,5,7,8,9,2,1,9,8,7,6,5,4,3,2,3,4,5,6,7,9,2,3,9,8,7,6,5,2,1,6,7,8,9,8,9,1,2,9,7,6,5,4,5,6,8,9,2,3,9,8,7,8,6,0,1,4,7,7,8,8,9,7,8,9,6,3,2,1,9,8,7,8,5,6,7,6,7,9,8,7,9,9,9,7,6,9,8,9,9,8,9,3,2,4},
            {9,9,9,8,6,7,6,7,9,2,1,0,1,9,9,7,6,8,9,3,4,5,6,9,8,9,3,4,5,9,8,7,4,3,9,9,9,9,8,7,8,9,3,9,8,7,8,6,6,7,8,9,3,9,8,7,6,5,4,1,2,3,4,5,6,7,8,9,9,8,7,4,4,9,8,7,6,7,4,3,4,5,8,8,9,8,9,9,8,9,9,9,9,2,3,9,8,4,3,5},
            {8,7,9,9,7,8,7,8,9,3,9,1,2,3,9,8,7,9,5,4,5,8,7,8,9,5,4,5,6,8,9,8,9,9,8,8,7,8,7,6,6,8,9,7,9,8,9,7,8,9,9,6,9,8,9,8,7,6,3,2,3,4,5,6,8,8,9,8,9,8,7,5,9,8,7,6,5,4,3,2,3,4,5,7,8,9,9,9,7,8,8,9,2,1,9,8,7,5,6,7},
            {7,6,7,8,9,9,8,9,5,9,8,9,3,4,5,9,9,8,7,5,6,7,8,9,9,7,6,6,7,9,8,9,9,8,7,7,6,5,6,4,5,9,9,6,4,9,9,8,9,5,6,5,8,7,8,9,8,9,5,5,4,5,6,7,9,9,6,7,8,9,7,6,9,9,8,5,4,3,2,1,2,3,6,9,9,9,9,8,6,7,7,8,9,2,3,9,8,8,7,8},
            {6,5,7,8,9,9,9,4,4,6,7,8,9,5,6,7,8,9,9,6,7,8,9,9,8,9,7,7,8,9,7,8,9,9,6,5,6,4,5,3,8,7,8,9,3,2,1,9,9,4,3,4,5,6,7,8,9,8,7,6,5,6,7,8,9,4,5,6,9,8,9,7,8,9,9,6,5,4,3,4,3,4,5,8,9,9,8,7,5,4,5,7,9,9,4,6,9,9,8,9},
            {3,4,6,7,8,9,1,2,3,5,6,9,7,6,7,9,9,9,8,7,9,9,5,6,7,8,9,8,9,8,6,7,9,8,7,4,3,2,1,2,3,6,7,9,4,3,0,9,8,9,2,3,4,5,6,9,8,9,9,7,6,7,8,9,4,3,4,9,8,7,8,9,9,9,8,7,6,5,5,5,4,6,6,7,8,9,9,8,6,2,4,6,7,8,9,7,8,9,9,8},
            {2,3,7,9,9,1,0,1,4,5,7,8,9,7,9,8,9,6,9,8,9,6,4,6,6,7,8,9,8,7,5,6,6,9,8,5,3,2,0,1,4,5,8,9,5,4,9,8,7,8,9,7,5,9,9,8,7,8,9,9,9,8,9,8,5,5,9,8,7,6,7,8,9,8,9,9,8,9,7,6,7,7,8,8,9,3,5,9,5,3,4,5,6,7,8,9,9,9,8,7},
            {9,4,9,8,9,2,1,2,3,4,5,7,8,9,6,7,3,4,5,9,1,2,3,4,5,6,9,8,6,5,4,3,5,6,9,6,5,3,4,2,3,6,7,8,9,9,8,7,6,7,9,8,9,8,9,7,6,7,8,9,9,9,8,7,6,9,8,8,6,5,6,7,8,7,8,9,9,9,8,7,8,8,9,9,0,2,9,7,6,4,5,6,7,8,9,9,9,8,9,6},
            {8,9,9,7,9,4,5,9,4,5,6,8,9,6,5,3,2,3,9,5,4,3,4,5,6,7,8,9,7,4,3,2,3,9,8,7,7,4,6,3,4,7,8,9,9,8,9,8,5,6,7,9,9,7,5,6,5,6,7,8,9,9,9,8,9,8,7,6,5,4,2,3,5,6,9,9,8,6,9,8,9,9,4,5,9,9,8,7,6,5,7,7,8,9,9,9,8,7,6,5},
            {7,6,8,6,8,9,9,8,9,9,7,8,9,7,6,4,3,9,8,6,5,4,6,7,8,9,9,9,8,9,9,3,4,5,9,9,8,5,6,9,9,8,9,7,6,7,5,6,4,5,7,8,9,5,4,5,4,5,6,8,9,9,8,9,5,9,9,8,7,5,1,2,3,9,8,7,6,5,4,9,1,2,3,4,8,9,9,9,7,6,7,8,9,9,9,7,9,6,5,4},
            {2,5,4,5,7,9,8,7,8,8,9,9,9,8,7,5,4,9,8,7,9,8,7,8,9,9,8,7,9,8,8,9,5,7,9,8,7,6,7,8,9,9,7,6,5,4,3,5,3,9,8,9,5,4,3,2,3,4,5,6,9,8,7,6,4,2,1,9,8,6,0,1,3,4,9,8,7,6,3,2,0,1,5,6,7,8,9,9,8,7,8,9,9,8,7,6,5,4,2,3},
            {1,2,3,6,7,8,9,6,5,7,8,9,9,9,8,9,5,6,9,8,9,9,8,9,9,9,8,6,7,6,7,9,9,8,9,9,8,9,8,9,9,8,7,5,4,3,2,1,2,8,9,5,4,3,2,1,2,3,6,9,8,7,6,5,3,1,0,1,9,7,1,2,4,5,6,9,6,5,4,3,2,3,4,6,8,9,9,8,9,9,9,7,6,9,8,7,6,5,3,4},
            {0,1,9,8,9,9,6,5,4,5,6,7,8,9,9,7,6,8,9,9,6,8,9,0,9,8,6,5,4,5,6,7,8,9,9,8,9,7,9,9,8,9,8,9,8,7,3,2,3,7,8,9,5,4,3,2,5,4,7,8,9,8,9,8,7,2,5,2,3,9,2,9,5,9,9,8,7,6,7,4,3,4,5,6,9,9,8,7,9,8,7,6,5,6,9,9,8,6,7,6},
            {1,2,4,6,7,8,9,3,2,4,5,6,8,9,9,8,7,9,8,7,5,4,2,1,9,8,7,4,3,6,7,8,9,9,8,7,5,6,9,8,7,6,9,9,9,6,5,3,4,6,7,9,6,5,4,3,4,5,6,7,9,9,9,7,6,5,4,3,5,6,9,8,9,8,9,9,8,9,6,5,4,5,6,7,8,9,7,6,8,9,8,5,4,3,4,5,9,9,8,7},
            {2,3,4,5,9,9,4,2,1,3,5,7,9,3,2,9,9,9,9,8,6,4,3,4,6,9,7,6,7,8,8,9,8,7,6,5,4,3,9,8,6,5,7,9,8,7,7,8,5,7,8,9,8,7,6,4,5,6,7,8,9,9,9,9,7,6,5,4,5,9,8,7,8,7,8,8,9,8,7,6,9,8,7,8,9,8,7,5,7,9,5,4,3,2,3,4,6,8,9,9},
            {3,4,5,6,9,4,3,1,0,3,5,8,9,4,3,9,8,9,9,9,7,6,4,8,7,9,8,7,8,9,9,3,9,8,9,6,6,4,9,7,5,4,6,7,9,8,9,9,9,8,9,7,9,8,9,5,9,7,8,9,9,8,9,9,9,7,6,5,9,8,7,6,5,6,9,7,8,9,8,7,8,9,8,9,5,9,3,4,9,8,9,5,2,1,2,3,5,6,7,8},
            {6,5,7,7,8,9,3,2,1,2,3,4,7,9,9,8,7,9,9,9,8,7,8,9,8,9,9,8,9,8,9,2,0,9,8,9,7,9,8,9,4,3,4,9,8,9,3,2,1,9,5,6,8,9,9,9,8,9,9,9,9,7,8,9,9,8,7,6,9,9,6,5,4,3,4,6,8,8,9,8,9,7,9,5,4,3,2,9,8,7,8,9,4,5,6,5,6,7,8,9},
            {7,8,9,8,9,5,4,5,2,3,4,5,6,8,9,5,6,8,8,9,9,9,9,9,9,8,7,9,8,7,8,9,9,8,7,8,9,8,7,9,2,1,9,8,7,6,5,3,2,3,4,8,9,9,8,9,7,8,9,8,7,6,7,8,9,9,9,9,8,7,5,4,3,2,3,4,6,7,8,9,7,6,5,4,3,2,1,9,8,6,7,8,9,6,8,6,7,8,9,7},
            {8,9,4,9,7,6,5,4,3,4,5,7,7,9,3,4,5,6,7,9,3,4,6,9,8,7,6,5,4,6,7,8,9,9,6,5,4,5,6,9,9,9,8,9,9,7,5,4,3,4,6,7,9,8,7,7,6,7,8,9,6,5,6,7,8,9,9,9,9,5,4,3,2,1,2,5,6,9,8,9,8,8,6,5,5,3,9,8,9,8,8,9,8,7,8,9,8,9,8,6},
            {9,9,3,9,8,7,6,6,5,7,6,8,9,8,1,0,1,2,8,9,5,5,9,8,7,6,5,6,3,5,6,7,8,9,5,4,3,4,9,8,7,6,6,7,8,9,6,7,6,5,7,9,8,7,6,4,5,6,7,8,9,4,5,9,9,2,9,8,7,6,3,2,1,0,1,4,5,6,7,8,9,9,7,8,9,9,9,7,6,9,9,8,9,8,9,3,9,3,4,5},
            {9,8,9,9,9,8,9,7,6,9,7,9,8,7,5,2,3,7,9,9,6,9,8,7,6,5,4,3,2,4,5,6,7,8,9,3,2,3,9,8,7,5,4,5,9,6,9,8,7,6,8,9,9,9,6,5,6,7,9,9,2,3,9,8,9,1,0,9,8,7,4,3,2,3,2,3,4,5,8,9,5,9,8,9,9,8,7,8,5,9,8,7,8,9,3,2,0,1,2,3},
            {8,7,8,9,9,9,9,8,7,8,9,8,7,6,4,3,4,6,7,8,9,3,9,8,5,4,3,2,1,3,4,6,9,9,2,1,0,9,8,7,6,4,3,1,3,5,8,9,8,7,9,2,9,8,7,6,7,8,9,3,1,9,8,7,9,3,4,5,9,8,8,9,3,4,3,4,5,6,7,9,4,5,9,2,1,9,6,5,4,9,8,6,7,8,9,2,1,9,3,9},
            {4,6,7,8,9,9,9,9,8,9,5,9,8,6,5,4,6,8,8,9,1,2,3,9,6,5,4,3,2,4,5,9,6,4,3,2,9,8,7,6,5,3,2,0,2,3,7,8,9,9,1,0,1,9,9,7,8,9,5,4,9,8,7,6,8,9,9,7,9,9,7,6,4,5,4,5,6,7,8,9,5,6,8,9,9,8,7,6,3,2,4,5,6,7,9,3,9,8,9,8},
            {3,4,5,6,7,8,9,8,9,5,4,2,9,7,6,5,6,7,8,9,0,1,9,8,7,6,5,6,4,5,7,8,9,5,4,3,5,9,9,5,4,3,2,1,3,4,5,6,7,8,9,1,2,4,9,8,9,7,6,9,8,9,6,5,7,8,8,9,8,9,8,7,9,6,5,9,7,8,9,9,6,8,9,9,8,7,6,5,4,1,2,6,7,9,8,9,8,7,9,7},
            {4,5,9,7,9,9,8,7,6,6,2,1,9,8,7,6,7,8,9,7,9,9,9,9,9,7,8,6,5,7,8,9,8,7,5,5,9,8,7,6,5,4,3,2,6,5,6,7,8,9,4,3,4,5,9,9,9,8,9,8,7,7,5,4,5,5,7,6,7,8,9,8,8,7,6,9,8,9,9,8,7,9,8,7,9,8,7,6,5,4,3,4,9,8,7,7,6,6,5,6},
            {6,7,8,9,1,0,9,8,5,4,1,0,1,9,8,9,8,9,5,6,9,8,9,9,9,8,9,8,6,8,9,4,9,9,6,7,8,9,8,7,6,6,5,3,4,5,7,8,9,7,5,9,5,9,8,7,8,9,8,7,6,5,4,3,2,3,4,5,6,7,9,9,9,8,9,9,9,0,1,9,9,9,7,6,8,9,8,7,6,5,6,9,8,9,6,5,4,2,3,5},
            {7,8,9,9,2,9,8,9,4,3,2,1,2,3,9,9,9,2,3,9,8,7,9,9,7,9,9,9,9,9,5,3,9,8,9,8,9,2,9,8,8,8,7,9,6,9,8,9,9,8,9,8,9,9,9,5,6,7,9,8,7,4,3,2,1,2,3,4,5,9,8,7,7,9,8,9,2,1,9,8,7,8,9,5,7,8,9,8,7,6,9,8,7,6,5,4,3,1,2,3},
            {8,9,8,7,9,8,7,6,5,4,4,3,4,4,5,9,4,3,9,8,7,6,7,8,6,7,8,9,8,8,9,9,8,7,8,9,9,1,9,9,9,9,9,8,7,8,9,7,8,9,9,7,8,9,8,6,8,9,9,8,9,7,3,1,0,3,6,7,6,9,7,6,5,6,7,8,9,9,8,7,6,7,9,4,2,1,0,9,8,7,9,9,8,8,6,5,4,2,3,4},
            {9,5,6,6,7,9,8,7,6,5,6,4,5,7,9,8,9,9,8,7,6,5,3,4,5,6,9,8,7,7,8,6,5,6,7,9,8,9,8,7,8,7,8,9,8,9,7,6,9,8,7,6,9,9,8,7,9,9,8,7,6,5,4,5,6,4,5,9,9,8,9,5,4,5,6,7,8,9,6,6,5,9,9,5,6,2,1,2,9,8,9,9,9,9,9,8,6,6,4,6},
            {4,3,4,5,8,9,9,8,7,6,7,5,6,9,8,7,8,9,9,8,7,3,2,3,4,5,6,9,6,5,6,5,4,6,8,9,7,9,7,6,9,6,7,8,9,7,6,5,4,6,4,5,7,8,9,8,9,3,9,8,7,6,7,6,7,8,9,9,8,7,9,4,3,4,5,6,9,6,4,3,4,8,8,9,7,3,2,3,4,9,9,8,5,4,5,9,8,7,5,8},
            {3,2,3,4,9,9,8,9,8,9,9,6,7,9,8,6,7,8,9,9,8,2,1,2,6,9,9,7,4,3,5,1,3,5,4,5,6,8,9,5,4,5,6,9,8,6,5,4,3,2,3,4,6,7,8,9,0,1,9,9,8,7,8,7,8,9,9,8,7,6,5,4,2,5,4,6,8,9,3,2,3,7,7,8,9,4,3,4,9,9,9,7,4,3,2,1,9,8,6,9},
            {9,0,9,9,7,6,7,8,9,8,9,9,9,8,6,5,6,8,9,3,2,1,0,1,9,8,7,6,5,2,1,0,1,2,3,6,7,8,9,2,3,5,6,7,9,8,6,3,2,1,2,6,7,7,8,9,1,9,8,7,9,8,9,8,9,9,8,9,9,7,6,2,1,2,3,8,9,6,4,3,4,5,6,7,8,9,5,6,8,9,8,6,5,4,3,0,9,8,7,8},
            {8,9,8,7,6,5,2,9,6,7,9,8,9,7,5,4,5,7,8,9,9,3,9,9,8,7,6,5,4,3,2,7,6,3,7,7,8,9,0,1,2,5,6,9,8,9,3,2,1,0,3,4,5,6,7,8,9,8,7,6,5,9,0,9,9,8,7,8,9,8,7,3,0,1,4,5,6,9,5,4,7,6,7,8,9,8,6,7,9,5,9,7,6,5,4,1,2,9,8,9},
            {7,8,9,6,5,4,3,4,5,9,8,7,6,5,4,3,4,6,9,7,8,9,8,7,9,8,7,6,7,4,3,4,5,4,6,7,8,9,9,4,3,4,9,8,7,6,5,3,2,1,2,3,4,5,6,7,8,9,9,7,3,2,1,9,8,7,6,7,9,9,4,2,1,2,3,4,6,8,9,5,8,7,8,9,1,9,7,9,0,3,9,8,7,6,5,6,7,8,9,9},
            {6,9,8,7,6,9,9,9,6,7,9,8,5,4,3,2,3,7,9,6,9,9,8,6,7,9,9,7,8,5,4,5,7,5,7,8,9,6,8,9,4,6,7,9,8,7,9,4,4,3,5,4,5,6,9,8,9,9,8,9,4,3,9,8,7,6,5,9,8,7,6,3,2,3,4,5,8,9,8,7,9,9,9,1,0,9,8,9,1,2,3,9,8,7,6,7,9,9,8,8},
            {5,4,9,8,9,8,7,8,9,9,8,7,6,5,4,1,2,3,4,5,7,8,9,5,6,7,9,8,9,6,5,6,7,6,7,9,3,5,7,8,9,8,9,0,9,9,8,9,5,4,6,5,6,7,8,9,7,6,7,8,9,9,8,7,6,5,4,5,9,8,9,4,3,6,5,6,7,8,9,8,9,9,3,2,1,9,9,5,4,3,4,5,9,8,9,8,9,7,6,7},
            {6,5,8,9,8,7,6,9,9,9,9,9,7,6,7,2,3,4,5,6,8,9,5,4,5,8,9,9,8,7,7,9,8,9,8,9,2,3,4,5,8,9,3,1,3,9,7,9,9,8,7,6,8,8,9,7,6,5,6,9,8,9,9,8,8,7,3,4,5,9,6,5,8,7,6,9,8,9,8,9,5,7,9,4,9,8,7,6,5,6,5,7,8,9,3,9,7,6,5,6},
            {7,6,7,8,9,6,5,6,9,8,9,7,6,5,4,3,4,5,6,7,8,9,3,2,3,4,5,9,9,8,8,9,9,9,9,4,3,4,5,6,7,8,9,2,9,8,6,8,9,9,8,9,9,9,7,6,5,4,5,6,7,9,9,9,7,6,4,5,6,9,8,7,9,8,7,8,9,9,7,7,4,5,6,9,8,9,8,9,8,7,6,8,9,9,2,9,8,7,4,3},
            {9,8,9,9,8,9,4,7,9,7,8,9,7,7,6,5,6,8,9,8,9,3,3,1,2,5,6,8,9,9,9,5,9,8,7,6,4,5,6,7,8,9,9,9,8,7,5,7,8,9,9,3,2,9,8,7,8,5,9,7,9,8,9,8,9,7,5,6,7,8,9,8,9,9,8,9,9,8,6,5,3,4,9,8,7,8,9,9,9,8,7,9,9,8,9,9,9,6,5,2},
            {4,9,8,7,6,4,3,6,5,6,7,9,8,9,7,6,7,9,3,9,3,2,1,0,1,4,7,8,9,6,5,3,2,9,9,9,8,7,8,9,9,9,9,8,7,6,4,5,9,9,9,9,1,0,9,9,9,9,8,9,8,7,6,7,8,9,9,7,8,9,6,9,4,4,9,9,9,9,7,9,2,9,8,7,6,7,9,9,9,9,9,8,9,7,8,9,8,9,2,1},
            {3,2,9,8,4,3,2,3,4,5,7,8,9,9,8,9,8,9,2,9,5,3,2,1,2,3,7,9,6,5,4,2,1,9,8,9,9,8,9,9,8,7,6,4,3,2,3,6,7,8,9,8,9,1,9,8,7,8,7,9,8,7,5,6,9,9,8,9,9,9,5,3,2,3,7,8,9,9,9,8,9,7,6,5,5,6,7,8,9,9,8,7,8,6,9,8,7,8,9,0},
            {5,0,9,9,3,2,1,2,3,4,8,7,7,8,9,5,9,8,9,8,9,4,3,2,4,5,6,9,7,9,5,4,9,9,7,8,9,9,9,9,9,8,7,3,2,1,4,5,8,9,8,7,8,9,9,9,5,7,6,5,4,3,4,6,8,9,7,8,9,8,9,2,1,5,6,9,9,9,8,7,8,9,7,4,3,2,3,5,6,9,9,6,7,4,8,7,6,7,9,1},
            {6,9,8,8,4,3,0,1,2,3,4,5,6,7,9,4,5,7,8,7,8,9,4,5,6,6,7,8,9,8,9,9,8,7,6,7,8,9,9,8,7,6,5,4,3,2,5,6,7,8,9,6,9,9,9,8,4,3,2,1,0,1,2,3,4,5,6,9,8,7,8,9,2,4,5,9,9,7,6,6,7,8,9,5,4,3,4,6,9,8,6,5,5,3,2,8,5,8,9,2},
            {7,9,7,6,6,5,1,2,3,7,8,9,7,9,4,3,4,4,5,6,7,8,9,6,7,8,8,9,9,7,8,9,7,6,5,8,7,8,9,9,8,7,6,5,4,3,6,7,8,9,6,5,6,9,8,7,5,4,9,4,2,4,3,4,5,6,7,9,3,5,7,9,3,5,9,8,7,6,5,5,6,9,8,9,9,4,5,7,9,9,6,4,4,2,1,5,4,5,8,9},
            {8,9,9,5,4,3,2,4,5,6,7,8,9,3,2,1,2,3,4,5,6,7,9,7,8,9,9,8,7,6,7,8,9,4,3,5,6,7,8,9,9,9,7,6,5,6,7,8,9,2,1,4,5,6,9,8,6,9,8,9,3,5,4,5,6,7,8,9,2,3,9,8,9,7,8,9,8,7,4,3,4,6,7,7,8,9,6,7,9,8,4,3,2,1,0,2,3,4,7,8},
            {9,9,8,7,6,5,9,5,6,7,8,9,5,4,3,2,3,4,5,6,8,9,9,8,9,9,9,9,8,4,6,7,8,9,2,6,7,8,9,9,8,9,8,7,6,7,8,9,2,1,0,3,4,8,9,9,9,8,7,8,9,6,7,8,9,8,9,0,1,9,8,7,8,9,9,9,9,9,5,2,3,4,5,6,9,9,7,9,8,7,6,4,6,5,4,3,4,5,6,7},
            {2,1,9,8,9,6,8,7,8,9,9,7,6,5,6,3,4,5,6,7,9,2,1,9,9,8,9,9,6,5,6,8,9,5,4,5,8,9,8,6,7,8,9,8,7,8,9,4,3,2,1,2,5,6,7,9,8,7,6,5,9,9,8,9,3,9,2,1,9,8,9,6,5,4,8,7,8,9,3,1,2,3,4,7,9,9,8,9,9,8,7,5,6,6,5,4,5,6,7,8},
            {9,0,9,9,8,7,9,9,9,9,9,9,8,6,5,4,5,6,7,9,8,9,2,9,9,7,9,8,7,6,7,9,7,6,5,6,9,8,7,5,8,9,7,9,8,9,6,5,4,3,4,3,4,5,9,8,7,6,5,4,8,9,9,0,1,2,9,9,8,7,6,5,4,3,5,6,9,8,9,2,3,5,6,8,9,4,9,5,6,9,8,9,9,8,6,7,6,7,9,9},
            {8,9,8,9,9,9,9,9,8,7,7,6,9,7,6,5,6,7,9,8,7,8,9,8,7,6,4,9,8,7,8,9,8,7,6,7,9,5,6,4,4,5,6,8,9,9,8,6,8,7,6,4,5,6,7,9,8,2,1,3,7,8,9,2,4,9,8,9,7,5,4,3,1,2,4,5,6,7,8,9,4,9,7,9,4,3,2,3,4,9,9,9,9,8,7,8,7,8,9,1},
            {7,6,6,8,8,9,9,8,7,6,5,4,5,9,8,9,8,9,9,7,6,8,9,9,9,5,3,4,9,8,9,9,9,8,7,8,9,4,3,2,3,4,5,6,8,9,9,9,9,8,7,9,7,7,9,8,7,3,2,5,6,8,9,9,9,8,7,6,5,3,2,1,0,1,3,4,5,6,7,8,9,8,9,9,9,4,6,7,9,8,7,8,9,9,8,9,8,9,9,0},
            {5,4,5,6,7,8,9,9,9,4,3,2,3,4,9,9,9,9,8,6,5,7,8,9,8,7,4,5,6,9,9,9,7,9,8,9,5,4,3,1,9,5,6,7,9,8,9,8,9,9,8,9,8,9,8,6,5,4,5,6,8,9,9,8,7,9,8,9,7,4,3,2,1,2,6,5,6,7,8,9,8,7,9,9,8,9,7,9,8,8,6,7,8,9,9,7,9,7,8,9},
            {4,2,4,5,7,9,0,2,9,5,9,3,4,5,8,9,8,7,6,5,4,6,7,8,9,9,7,6,7,8,9,8,6,5,9,7,6,5,9,9,8,9,7,9,9,7,8,7,8,9,9,8,9,3,9,7,6,5,9,7,8,9,8,9,6,5,9,7,6,5,4,3,2,3,4,7,8,8,9,9,8,6,9,8,7,8,9,8,7,6,5,6,9,9,8,6,5,6,7,8},
            {2,1,3,4,8,9,1,9,8,9,8,9,5,6,7,8,9,9,6,5,3,4,5,7,8,9,9,9,8,9,8,6,5,4,9,8,7,9,8,8,7,8,9,8,9,6,7,6,7,8,9,7,6,5,9,8,7,7,8,9,9,6,7,8,9,4,2,9,8,6,5,4,3,6,5,6,7,9,8,7,6,5,9,7,6,7,8,9,6,5,4,5,9,9,6,5,4,5,8,9},
            {3,2,5,6,7,8,9,9,7,8,7,8,9,9,8,9,9,8,7,3,2,1,3,6,7,8,9,9,9,8,7,8,4,3,4,9,9,8,7,5,6,9,9,7,6,5,6,5,6,9,9,8,7,9,8,9,9,8,9,3,6,5,6,7,8,9,0,1,9,7,6,6,5,6,8,9,8,9,7,6,7,4,7,6,5,6,7,8,9,6,3,6,8,8,9,1,2,3,4,5},
            {9,3,4,6,7,8,9,8,6,5,6,7,8,9,9,9,8,6,5,4,7,5,4,5,6,7,8,9,9,9,6,5,1,2,5,6,9,7,6,4,5,9,8,6,5,4,5,4,6,7,8,9,9,8,7,6,5,9,1,2,3,4,8,9,9,2,1,2,9,8,7,7,8,8,9,5,9,9,9,5,4,3,1,2,4,7,8,9,7,5,4,5,6,7,9,0,1,2,3,4},
            {8,9,5,7,8,9,8,6,5,4,5,6,7,9,2,1,9,7,6,9,8,6,6,6,7,8,9,6,9,8,9,4,2,3,4,9,8,8,4,3,6,9,9,5,4,3,2,3,4,6,7,8,9,7,6,5,4,3,2,3,4,5,9,5,4,3,2,5,6,9,9,8,9,9,5,4,3,9,8,7,5,1,0,1,2,6,7,8,9,6,5,6,7,9,8,9,2,9,4,5},
            {7,8,9,9,9,8,7,6,5,3,4,5,9,8,9,2,9,8,8,9,8,7,7,7,8,9,6,5,9,7,8,9,3,4,9,8,7,6,5,4,9,8,5,4,3,2,1,2,4,5,9,9,8,9,7,9,6,4,5,4,5,6,7,9,8,4,3,4,5,6,7,9,8,7,4,3,2,9,7,5,3,2,1,5,4,5,6,7,8,9,6,7,9,8,7,8,9,8,9,6},
            {6,8,9,9,9,9,9,5,4,2,3,5,6,7,8,9,8,9,9,2,9,9,9,8,9,7,5,4,5,6,7,8,9,9,9,9,9,7,6,9,8,7,6,5,6,3,4,6,5,7,8,9,7,8,9,8,7,5,6,5,7,7,8,9,6,5,4,5,7,7,8,9,7,6,5,9,3,4,9,8,5,4,3,6,5,7,8,9,9,4,9,8,9,7,6,7,9,7,8,9},
            {5,6,7,8,9,8,7,6,0,1,2,9,8,9,9,7,7,8,9,1,2,4,5,9,6,6,4,3,4,5,4,5,9,8,7,8,9,9,8,9,9,9,7,6,5,4,5,6,7,8,9,8,6,7,9,9,8,6,7,6,8,8,9,8,7,6,5,6,8,9,9,9,9,7,9,8,9,9,8,7,6,8,4,5,6,8,9,5,4,3,5,9,8,9,5,6,7,6,7,8},
            {4,5,6,7,9,9,8,7,3,2,3,4,9,7,6,5,6,9,1,0,1,5,9,7,5,4,3,2,1,2,3,9,8,7,6,6,7,8,9,5,3,2,9,7,6,5,6,7,8,9,7,6,5,8,8,9,8,7,8,7,8,9,9,9,8,7,6,9,9,8,8,9,8,9,8,7,6,4,9,8,7,9,7,6,8,9,2,9,7,5,9,8,7,8,4,5,4,5,6,9},
            {3,4,7,9,8,7,6,5,4,5,4,5,8,9,5,4,5,8,9,1,2,9,8,9,6,5,4,3,2,3,9,8,6,5,4,5,6,7,8,9,4,3,9,8,7,8,8,9,9,6,4,3,4,5,6,7,9,8,9,8,9,9,8,9,9,8,9,8,7,6,7,8,7,9,7,6,5,3,4,9,9,9,8,7,8,9,0,9,9,9,8,7,6,4,3,4,3,4,5,7},
            {2,5,6,7,9,8,7,6,5,7,5,6,7,8,9,5,6,7,8,9,9,8,7,8,9,6,5,4,4,9,7,6,5,4,3,4,5,6,7,8,9,4,5,9,8,9,9,9,8,5,3,2,1,4,5,7,9,9,0,9,8,7,6,7,8,9,8,7,6,5,4,7,6,8,9,9,7,4,5,6,9,9,9,8,9,6,9,8,9,9,9,8,7,3,2,3,2,5,6,5},
            {3,4,5,6,7,9,8,9,7,8,6,7,8,9,7,6,8,8,9,7,6,5,6,7,8,9,6,7,9,8,6,6,4,3,2,3,4,7,8,9,6,5,6,7,9,3,9,8,7,6,4,3,2,3,4,6,8,9,1,9,8,6,5,6,9,8,7,6,5,4,3,6,5,6,7,8,9,5,6,7,8,9,9,9,5,4,6,6,9,8,7,6,5,2,1,0,1,2,3,4},
            {4,5,6,8,9,9,9,9,8,9,8,8,9,9,8,7,9,9,6,5,5,4,7,7,9,8,7,9,8,6,5,4,3,2,1,2,3,8,9,8,7,6,7,8,9,2,1,9,8,7,5,4,3,6,5,6,9,9,9,8,7,5,4,5,9,7,6,5,4,3,2,3,4,5,7,9,9,8,7,8,9,9,9,5,4,3,4,5,6,9,9,8,4,3,2,3,2,3,4,5},
            {5,6,7,9,9,8,7,6,9,1,9,9,8,9,9,8,9,6,5,4,4,3,4,5,6,9,8,9,9,7,6,3,2,1,0,3,4,9,9,9,8,7,8,9,4,3,5,9,8,7,6,7,8,9,6,7,8,9,8,7,6,5,2,9,8,6,5,4,3,2,1,2,3,6,8,9,2,9,8,9,8,9,8,7,5,6,7,7,8,9,9,8,5,4,3,4,5,4,5,6},
            {6,7,8,9,9,9,6,5,3,2,4,6,7,8,9,9,6,5,4,3,2,1,2,6,9,8,9,0,1,9,5,4,3,2,1,4,6,8,9,0,9,8,9,6,5,9,6,7,9,8,8,9,9,1,9,8,9,9,9,6,5,4,1,9,8,7,6,5,4,3,2,5,4,5,9,0,1,2,9,6,7,8,9,8,6,7,8,9,9,9,8,7,6,7,9,5,7,6,8,7},
            {7,9,9,9,9,8,6,5,4,3,4,5,6,7,9,8,7,6,7,5,3,2,3,4,5,7,8,9,9,8,7,5,4,3,2,5,6,9,3,2,3,9,9,7,6,7,8,9,9,9,9,5,3,2,3,9,9,9,8,7,6,2,0,1,9,9,8,7,5,4,3,6,5,7,8,9,2,3,4,5,6,7,8,9,7,8,9,0,1,2,9,8,7,8,9,6,8,7,9,8,}
    };

    int laatsteRij = heightMap.length - 1;
    int laatsteKolom = heightMap[0].length - 1;


    List<Integer> lowPointValues = new ArrayList<>();
    List<Integer> lowPointCoords = new ArrayList<>();


    public void controleerMidden(int[][] heightMap) {
        for (int i = 1; i < heightMap.length - 1; i++) {
            for (int j = 1; j < heightMap[i].length - 1; j++) {
                int a = heightMap[i - 1][j];
                int b = heightMap[i][j - 1];
                int c = heightMap[i][j + 1];
                int d = heightMap[i + 1][j];
                if (heightMap[i][j] < a && heightMap[i][j] < b && heightMap[i][j] < c && heightMap[i][j] < d) {
                    lowPointValues.add(heightMap[i][j]);
                    lowPointCoords.add(i);
                    lowPointCoords.add(j);
                }

            }
        }

    }

    public void controleerRandBoven(int[][] heightMap) {

        for (int j = 1; j < (heightMap[0].length) - 1; j++) {

            int b = heightMap[0][j - 1];
            int c = heightMap[0][j + 1];
            int d = heightMap[0 + 1][j];
            if (heightMap[0][j] < b && heightMap[0][j] < c && heightMap[0][j] < d) {
                lowPointValues.add(heightMap[0][j]);
                lowPointCoords.add(0);
                lowPointCoords.add(j);
            }

        }
    }

    public void controleerRandOnder(int[][] heightMap) {

        for (int j = 1; j < heightMap[heightMap.length - 1].length - 1; j++) {
            int a = heightMap[heightMap.length - 2][j];
            int b = heightMap[heightMap.length - 1][j - 1];
            int c = heightMap[heightMap.length - 1][j + 1];
            if (heightMap[heightMap.length - 1][j] < a && heightMap[heightMap.length - 1][j] < b && heightMap[heightMap.length - 1][j] < c) {
                lowPointValues.add(heightMap[heightMap.length - 1][j]);
                lowPointCoords.add(heightMap.length - 1);
                lowPointCoords.add(j);
            }

        }
    }

    public void controleerRandLinks(int[][] heightMap) {
        for (int i = 1; i < laatsteRij; i++) {
            int a = heightMap[i - 1][0];
            int c = heightMap[i][1];
            int d = heightMap[i + 1][0];

            if (heightMap[i][0] < a && heightMap[i][0] < c && heightMap[i][0] < d) {
                lowPointValues.add(heightMap[i][0]);
                lowPointCoords.add(i);
                lowPointCoords.add(0);
            }

        }
    }

    public void controleerRandRechts(int[][] heightMap) {

        for (int i = 1; i < laatsteRij; i++) {
            int a = heightMap[i - 1][laatsteKolom];
            int b = heightMap[i][laatsteKolom - 1];
            int d = heightMap[i + 1][laatsteKolom];

            if (heightMap[i][laatsteKolom] < a && heightMap[i][laatsteKolom] < b && heightMap[i][laatsteKolom] < d) {
                lowPointValues.add(heightMap[i][laatsteKolom]);
                lowPointCoords.add(i);
                lowPointCoords.add(laatsteKolom);
            }

        }
    }

    public void controleerHoeken(int[][] heightMap) {
        if (heightMap[0][0] < heightMap[1][0] && heightMap[0][0] < heightMap[0][1]) { //linksboven
            lowPointValues.add(heightMap[0][0]);
            lowPointCoords.add(0);
            lowPointCoords.add(0);
        }
        if (heightMap[0][laatsteKolom] < heightMap[1][laatsteKolom] && heightMap[0][laatsteKolom] < heightMap[0][laatsteKolom - 1]) { //rechtsboven
            lowPointValues.add(heightMap[0][laatsteKolom]);
            lowPointCoords.add(0);
            lowPointCoords.add(laatsteKolom);
        }
        if (heightMap[laatsteRij][0] < heightMap[laatsteRij][1] && heightMap[laatsteRij][0] < heightMap[laatsteRij - 1][0]) { //linksonder
            lowPointValues.add(heightMap[laatsteRij][0]);
            lowPointCoords.add(laatsteRij);
            lowPointCoords.add(0);
        }
        if (heightMap[laatsteRij][laatsteKolom] < heightMap[laatsteRij - 1][laatsteKolom] && heightMap[laatsteRij][laatsteKolom] < heightMap[laatsteRij][laatsteKolom - 1]) {
            lowPointValues.add(heightMap[laatsteRij][laatsteKolom]);
            lowPointCoords.add(laatsteRij);
            lowPointCoords.add(laatsteKolom);
        }
    }
}


//put height map in 2D array
//write a function that checks the middle of the map (from minValue+1 to maxValue-1 on both axes) for low points (these are lower than all 4 adjacent values)
//  if it finds a low point, put the value+1 in a counter.
//write a function that checks the edges of the map, excluding the corners, for low points (these are lower than all 3 adjacent values)
//  if it finds a low point, put the value+1 in a counter.
//write a function that checks the corners of the map for low points. (these are lower than all 2 adjacent values)
//  if it finds a low point, put the value+1 in a counter.
// counter= answer.

/*{
        if (heightMap[0][0] < heightMap[1][0] && heightMap[0][0] < heightMap[0][1]) {
        lowPointValues.add(heightMap[0][0]);
        }
        if (heightMap[0][heightMap.length] < heightMap[0][heightMap.length - 1] && heightMap[0][heightMap.length] < heightMap[1][heightMap.length]) {
        lowPointValues.add(heightMap[0][heightMap.length]);
        }
        if ((heightMap[heightMap.length-1][0] < heightMap[heightMap.length - 1][0] && heightMap[heightMap[0].length-1][0] < heightMap[heightMap[0].length-1][1])) {
        lowPointValues.add(heightMap[heightMap.length-1][0]);
        }
        if (heightMap[heightMap.length-1][heightMap[0].length-1] < heightMap[heightMap.length - 2][heightMap[0].length-1] && heightMap[heightMap.length-1][heightMap[0].length-1] < heightMap[heightMap.length-2][heightMap[0].length - 1]) {
        lowPointValues.add(heightMap[heightMap.length-1][heightMap[0].length-1]);
        }

        }

 */
